{
  "filename": "CASE-технологии создания имитационных моделей в среде Pilgrim 5.pdf",
  "title": "CASE-технологии создания имитационных моделей в среде Pilgrim 5",
  "abstract": "CASE технологии создания имитационных моделей в среде Pilgrim 5 Имитационному моделированию поддаются практически все процессы независи мо от их природы, будь она экономической, физической, социальной или любой дру гой. Система Pilgrim 5 давно завоевала популярность как мощная и гибкая среда ими тационного моделирования. В нынешнее время требуются новые удобные инстру менты, позволяющие создавать компьютерные модели не только профессионалам в области информационных технологий, но и специалистам в других областях.",
  "full_text": "Концепция А нглийская аббревиатура «CASE» рас шифровывается как Computer Aided Software Engineering. На русский язык это дословно переводится как «разработка программного обеспечения с помощью ком пьютера», а термином «CASE средства» обычно называют разнообразные програм мы или модули, которые облегчают пользо вателю жизнь при решении его насущных задач на персональном компьютере и дела ют его работу более удобной и комфорт ной. В частности, именно к этому классу программного обеспечения относятся: • мастера, т. е. модули более крупных программ или отдельные программы, позво ляющие пользователю произвести любое сложное действие посредством выбора ря да опций за несколько шагов, и обычно реа лизуемые в виде последовательности диа логовых окон, часто содержащих кнопки «Вперед», «Назад», «Завершить». Мастера обычно используются в операционных сис темах семейства Microsoft Windows; • графические конструкторы, т. е. про граммные средства, помогающие пользова телю создать некий сложный документ с по мощью автоматизированной обработки схе мы, рисунка, таблицы или чего либо подобно го. Как правило, конструкторы реализуются в виде отдельных программных продуктов. В качестве примера можно привести пакет Kinetix 3D Studio MAX, позволяющую созда вать трехмерные изображения и анимацию без программирования и сохранять резуль таты в разных форматах. Вообще называть 3D Studio MAX конструктором довольно оп рометчиво -это очень мощная система трехмерной визуализации, но, тем не менее, по сути -это графический конструктор. Понятие «графический конструктор» до вольно широкое (как и все, рассматривае мые в данной статье). Очевидно, что термин «конструктор», означает нечто, способное преобразовывать и компоновать некоторые составляющие части для получения осмыс ленного целого. В нашем случае в роли это го «нечто» выступает программное обеспе чение, проверяющее корректность и пре образующее информацию, полученную от пользователя (путем удобным для него) в иной формат, пригодный для дальнейшей обработки (но уже не настолько понятный пользователю и пригодный для визуального анализа). Таким образом, конструктор явля ется промежуточным звеном между пользо вателем и программой обработки некото рой информации или целевой программой (рис. 1). Термин «графический» в данном случае означает, что информация, которую вводит пользователь, имеет графический характер (полностью или, как правило, час тично). Существуют и другие разновидности CASE средств, но когда мы говорим о CASE технологии в данной статье, то имеем в виду 52 Инструментальные средства R Технологии разработки программного обеспечения разработку имитационных моделей с помо щью совершенно конкретного продуктаграфического конструктора для среды ими тационного моделирования Pilgrim 5. Чтобы понять степень необходимости графического конструктора для среды Pilgrim 5, придется обратиться к техниче ской стороне его реализации. Сама среда Pilgrim 5 для операционной системы Windows программно реализована в виде библиотеки статической компоновки pilgrim.lib, файла ресурсов pilgrim.res и двух заголовочных файлов на языке программи рования C++ -pilgrim.h и simulate.h. Файл модели в этой среде представлен исходным файлом программы на языке C++. Файл од ной из простейших моделей выглядит сле дующим образом: Далее модель транслируется с помощью обычного компилятора C++ и на выходе по лучается исполняемый программный файл с расширением .exe, выполнив который в операционной системе семейства Micro soft Windows, пользователь может запус кать модель, осуществлять анализ задер жек в очередях, динамики потока, загрузки узлов, результатов в файле отчета (*.rep) и трассировку модели. После компиляции модель не требует дополнительных файлов (таких как динамические библиотеки *.dll) для своей работы. Таким образом, Pilgrim 5 представляет собой не просто систему имитационного моделирования, а систему, реализованную в виде того, что часто называют фреймворк (набор функций, классов или иных компо нент одинаковой архитектуры, предназна ченных для упрощения создания программ определенной узкой направленности). Та кая организация системы весьма удобна для программистов -составителей моде лей, знакомых с языком C++. Хотя и здесь часто возникают сложности, поскольку бла годаря множеству макроопределений в за Gem ликвидировал множество проблем, в частности, пользователю были предос тавлены следующие возможности: • построение структуры модели с помо щью мыши и метода drag and drop («перета щить и оставить») применительно к узлам и связям между ними; • удобные диалоги для редактирования переменных модели, ее глобальных пара метров и параметров отчета; • единое диалоговое окно для ввода на звания узла, его номера, параметров, дей • выделять ключевые переходы между узлами (стрелки) различной толщиной, ви дом или цветом линий; • выполнять заливку узлов различным цветом; • помещать текстовые сообщения на страницу со схемой и т. д. Указанные возможности редактирова ния не сказываются на содержании исход ного файла модели, но помогают в подго товке сопутствующей документации и дела ют саму схему более читабельной. Последовательность шагов при по строении модели в конструкторе Architect практически не отличается от очередности шагов того же процесса при использовании карандаша и бумаги или при использова нии Gem. Эта последовательность включа ет в себя: • составление сети узлов; • выбор их параметров; • определение действий до и после вхо да транзакта в каждый узел; • определение условий переходов меж ду узлами; • установка глобальных параметров мо дели и параметров отчета; • генерация исходного файла модели (хотя при «бумажной» технологии послед ний шаг нужно производить вручную, как и все остальные). В следующем разделе будет подробно описана технология работы с конструкто ром Architect, а пока рассмотрим ряд клю чевых отличий в отношении того, как выпол няются приведенные шаги реализации ими тационной модели. 1. В редакторе Architect имеется возмож ность сохранять в одном файле документа несколько моделей. Это могут быть совер шено разные модели, или одна и та же мо дель с разными параметрами узлов. Един ственное, что нужно сделать для переклю чения на трансляцию другой модели -это изменить один параметр («Основной слой») в диалоговом окне редактирования гло бальных параметров модели. 2. Конструктор допускает модерниза цию с целью приближения к предметной об ласти пользователя. Возможна замена па литры с узлами, например, если большин ство моделей имеет кадровую направлен ность, можно создать палитру, где узел Server заменен на узлы «Юрист», «Бухгал тер», «Грузчик» и т. д., причем узлы могут иметь уникальные параметры по умолча нию. Конечно, такая возможность будет по лезна только опытным пользователям и экс пертам. 3. Предусмотрена синтаксическая про верка параметров узлов на тип и характер вводимых значений. Например, редактор не позволит указать отрицательное число в ка честве количества каналов сервера или узел Create в качестве направления про водки для узла Send. Причем проверка про изводится дважды: во время редактирова ния параметров узла и во время трансляции схемы в исходный файл модели (сделано это на тот случай, если с момента последне го редактирования параметров узла изме 58 Инструментальные средства R Технологии разработки программного обеспечения нилась схема модели, количество или тип переменных параметров и т. д.). 4. Пользователю не надо писать исход ный код на языке C++ при составлении не обходимых к выполнению действий. Для этого предусмотрен редактор, позволяю щий добавлять в нужные места модели код для изменения переменных, параметров транзактов и вызовов операторов. 5. Есть возможность добавлять в выра жения условные блоки и опять таки без на писания кода вручную. Как и при программи ровании действий допускается использова ние переменных параметров, некоторых па раметров узлов, параметров транзактов и глобальных переменных Pilgrim 5 (напри мер, timer). Единственные знания, которыми должен обладать пользователь -это зна ния том, что он хочет получить, плюс эле ментарные знания о правилах построения и вычисления выражений. И составление действий и вставка условных блоков стали значительно удобнее благодаря специаль но разработанной технологии Step Chain Logic (или, просто, SCL), позволившей от делить мнемоническое представление вы ражений (намного более понятное пользо вателю) от сухого представления в синтак сисе языка C++. Подробнее технология SCL будет рассмотрена ниже. 6. Трансляция модели в исходный код происходит на глазах у пользователя. Он видит, какие синтаксические или семанти ческие ошибки присутствуют и где именно они встретились транслятору. • четыре файла с растровыми значками для дополнения основной панели инстру ментов Microsoft Visio четырьмя кнопками с функциями, специфическими для конст руктора Architect и Pilgrim 5 (modbeg_small. ico, vars_small.ico, compile_small.ico, report_ small.ico); В целом конструктор • в папке Samples находятся примеры реализации различных моделей Pilgrim 5 с помощью конструктора Architect в виде файлов документов Microsoft Visio (с расши рением vsd); • Install.txt -последние замечания по установке (файл отображается в окне в процессе установки); • ReadMe.txt -актуальные замечания по работе с поставляемой версией Archi tect, наиболее часто задаваемые вопросы (Frequently Asked Questions -FAQ). Графический конструктор Architect из бавляет пользователя от многих забот, свя занных с созданием имитационных моде лей. Однако для реализации действующих моделей его одного недостаточно (рис. 6). Для того чтобы иметь возможность соз давать и запускать готовые имитационные модели Pilgrim 5, на компьютере должно быть корректно установлено следующее программное обеспечение: • Microsoft Windows 95 или выше в каче стве операционной системы; • 62 Инструментальные средства R Технологии разработки программного обеспечения Для удобства пользователя кнопки снабжены всплывающими подсказками. Они имеют следующее назначение (слева направо): • вызов диалога редактирования пере менных параметров модели; • вызов диалога редактирования гло бальных параметров модели; • вызов диалога редактирования пара метров отчета по модели; • вызов диалога трансляции модели в программный код. Рассмотрим функции каждой из них под робно. Нажатие кнопки редактирования пере менных параметров модели (с рисунком, содержащим буквы « ab cd ») выводит на эк ран диалоговое окно, представленное на рис. 17. Переменные параметры модели это лю бые вычисляемые или считываемые из какого либо источника величины, которые непосредственно не связаны с архитекту рой среды имитационного моделирования Pilgrim 5, но могут использоваться: • в ходе навигации транзактов по моде ли (например, для определения следующе го узла на их пути); • в качестве параметров узлов модели; • для хранения некоторых дополнитель ных результатов, которые не подсчитыва ются автоматически; • любым другим способом, который соз датель модели сочтет нужным использовать. • сводная таблица имеющихся парамет ров в нижней части диалога; • текстовое поле «Имя параметра». Оно должно состоять из заглавных или строч ных латинских букв, без цифр, русских букв и других символов. Если пользователь на рушит это правило, то при попытке добав ления или обновления информации о пара метре он получит сообщение об ошибке. Следует помнить, что имена параметров чувствительны к регистру. Например, «Zf» и «zF» -это два разных параметра, типы и значения которых полностью независимы друг от друга; • выпадающий список «Тип парамет ра». Допустимы четыре типа: целый, дроб ный, логический и распределение; • текстовое поле или выпадающий спи сок «Начальное значение». Данный эле мент меняет свой внешний вид в зависимо сти от того, какой тип параметра выбран в предыдущем выпадающем списке. Если был выбран целый или дробный тип, то эле мент представляет собой текстовое поле, в которое пользователь может собственно ручно ввести желаемое начальное значе ние (характер значения автоматически про веряется на допустимость в соответствии с типом). Если в качестве типа взят логиче ский, то начальное значение выбирается из выпадающего списка с двумя альтернати вами: «Да» («Истина») и «Нет» («Ложь»). Распределение -это специальный тип пе ременных параметров, уникальный для Pilgrim 5. В отличие от остальных типов ему нет применения в обычных программах на С++, и с точки зрения этого языка он реали зован в виде целого типа и макроопределе ний. Однако для имитационных моделей иногда бывает необходимо сменить распре деление сервера в зависимости от каких нибудь вычислений. В этом случае полезно иметь переменные специального типа. Итак, если установлен тип распределение, то поль зователь может выбрать начальное значе ние параметра из выпадающего списка, в ко тором присутствуют следующие варианты: «Нет», «Нормальное», «Равномерное», «Экс поненциальное», «Бета». Если пользова тель сам не выбирает или не вводит началь ное значение параметра, конструктор при добавлении параметра запоминает значе ние по умолчанию в зависимости от его ти па: 0 для целого и дробного типов или «Нет» для логического типа и типа распределения (следует иметь в виду, что в последних двух случаях «Нет» имеет совершенно разный смысл); • текстовое поле «Описание парамет ра». Представляет собой комментарий, ко торый без изменений войдет в файл исход ного кода модели. Дело в том, что по срав нению с графическим представлением мо дели со всеми пометками и пояснениями, файл с исходным кодом модели нельзя на звать информативным с точки зрения поль зователя непрограммиста. Комментарии по зволяют внести в него определенную яс ность. Благодаря им становится хотя бы по нятно, что означает конкретный параметр. Описание параметра с точки зрения син таксиса может быть любым -здесь нет ни каких ограничений; • кнопка «Добавить». Становится дос тупна, после того, как пользователь ввел имя параметра, при условии, что параметр с идентичным именем еще не определен и не присутствует в списке в нижней части 68 Инструментальные средства R Технологии разработки программного обеспечения • точность результатов моделирования, т. е. количество знаков после запятой; • тип пространства моделирования и но мер контролируемой суперфункции (в на стоящей версии конструктора изменение этих параметров не поддерживается). Помимо перечисленных параметров в диалоге присутствует выпадающий список «Страница основного слоя модели», два тек стовых поля и кнопка «Построить», которые не имеют отношения к функции modbeg(…). Список «Страница основного слоя моде ли» позволяет выбрать рабочий лист Visio, содержащий схему модели, которую следу ет транслировать в программный код. Это необходимо в том случае, когда в одном до кументе сохраняется несколько схем моде лей на разных листах, что может быть весь ма полезно. Следует помнить, что на каж дом листе может быть своя схема, однако переменные параметры, а также настройки глобальных параметров модели и парамет ры отчета едины для всех схем (если они должны отличаться для разных листов, их необходимо изменить вручную). Два текстовых поля и кнопка «Постро ить» в нижней части диалога позволяют за давать действия, которые должны быть вы полнены моделирующей программой до фактического начала процесса моделиро вания и связаны со специально разрабо танной системой построения выражений SCL. Перейдем к следующей кнопке на инст рументальной панели, а именно к кнопке вызова диалога редактирования парамет ров отчета по модели (с рисунком в форме буквы «R»). Диалоговое окно, появляющееся при на жатии этой кнопки (рис. 19) содержит на много меньше элементов, чем предыдущее. Большая часть редактируемых в нем пара метров соответствует аналогичным пара метрам функции modend(…). В данном диалоге можно выбрать имя для файла отчета, а также его формат (наличие/ отсутствие разбивки на страницы и количест во строк на странице). Текстовое поле «Файл модели» предназначено для указания имени исполняемого файла модели. Оно недоступ но, поскольку в текущей версии конструкто ра автоматическая компиляция и компонов ка исполняемого файла не производится. Переходим к последней (и самой важ ной) кнопке на инструментальной моделикнопке вызова диалога трансляции модели в программный код (с нанесенными на нее символами «C++»). Именно с помощью диалога, отображае мого при нажатии этой кнопки, создатель модели может получить ее представление, понятное компилятору с языка C++ и, впо следствии, создать ее исполняемый файл (рис. 20). Для того чтобы это сделать, необ ходимо нажать кнопку «Транслировать». В верхней части окна расположен спи сок событий трансляции: в процессе транс ляции конструктор проверяет переменные параметры модели, действия до начала процесса моделирования, глобальные па раметры модели и отчета, находит вначале генераторы, затем все узлы и связи между ними и соединяет это все воедино. В списке 70 Инструментальные средства R Технологии разработки программного обеспечения Построение модели производится с по мощью метода drag and drop, который часто применяется в среде Windows во множест ве приложений. Например, для того чтобы добавить в модель узел типа «Генератор», необходимо навести курсор мыши на соот ветствующий значок в палитре, зажать ле вую кнопку мыши и, не отпуская ее, перета щить тень от значка в рабочую область до кумента. При помещении узла в рабочую область ему автоматически присваивается номер, а числовые, логические и остальные параметры принимают значения установ ленные по умолчанию. Нумерация узлов выполняется по поряд ку, который не может быть изменен произ вольно. Например, вы поместили в документ два генератора, затем очередь и термина тор. В этом случае два генератора будут иметь номера 1 и 2 (в порядке их добавле ния), очередь -номер 3, а терминаторномер 4. Если после этого добавить в мо дель узел сервер, то он получит номер 5 не зависимо от того, где в графе модели он бу дет располагаться, из какого узла в него бу дут поступать транзакты, и куда из него они будут выходить. Если же перед добавлени ем сервера вы решите удалить генератор с номером 2, то сервер при добавлении по лучит именно этот номер -2. Выражаясь формально, узлы нумеруются непрерывно безотносительно к топологии модели. Для того чтобы соединить узлы между собой, необходимо перетащить в рабочую область документа коннектор, а затем с по мощью уже упомянутого метода drag and drop соединить его концы с нужными узла ми. При попадании оконечности (начала или конца) коннектора в область соедине ния с каким либо узлом, в месте соедине ния появляется красная рамка. Отметим, что если какой либо коннектор в момент трансляции модели оказывается «подве шенным», т. е. один или оба его конца не за креплены, то это не считается ошибкойтакой коннектор просто не учитывается, для транслятора он невидим. В сущности, по скольку коннекторы являются стандартны ми элементами Visio, вместо перетаскива ния их с палитры, можно воспользоваться инструментами самого Visio. Однако по умолчанию коннекторы в Visio не являются направленными, конец коннектора не обо значен стрелкой в отличие от аналогичных коннекторов на палитре. Направление же коннектора чрезвычайно важно для транс лятора, который должен знать переходит 72 Инструментальные средства R Технологии разработки программного обеспечения • определения операций, которые необ ходимо совершить до начала процесса мо делирования; • определения действий до входа тран закта в определенный узел или после входа в него; • создания критерия выбора транзак том следующего узла на его пути (при нали чии нескольких вариантов). Для того чтобы придать документу с мо делью оформленный вид необходимо ис пользовать: • различные шрифты и стили для надпи сей в составе узлов (рис. 32); • различные стили линий (рис. 33); • дополнительные палитры и их элемен ты (рис. 34); • цвета и стили заливки (рис. 35); • текст (рис. 36). Все нехитрые перечисленные приемы оформления положительно влияют на чита бельность модели. 78 Инструментальные средства R Технологии разработки программного обеспечения Смысл моделируемой реальной ситуа ции заключается в следующем: • несколько потенциальных клиентов пытаются попасть в кафе; • если перед кафе имеется очередь, то часть клиентов остается ждать, а часть ухо дит сразу; Инструментальные средства R Технологии разработки программного обеспечения 79 В. В. Артюхин Рис. 37. Модель «Кафе с двойным захватом официантов» • после входа в кафе клиентам необхо димо некоторое время, чтобы раздеться, помыть руки и т. д.; • расположившись за столиком клиен ты ждут официанта; • после того как заказ принят, требует ся некоторое время на его приготовление и прием пищи; • далее снова подходит официант, что бы клиент расплатился; • в конце процесса клиент уходит. Схема и количество узлов модели, соот ветствующей описанной ситуации, также как ее программа, могут быть различными в зависимости от того, какой уровень дета лизации требуется, а также от подхода к по строению модели, который применил ее со ставитель. Например, как столик в кафе, так и официант в модели могут быть пред ставлены в виде активных ресурсов (узлов типа «Сервер») или пассивных ресурсов (узлов типа «Склад»); модель может быть построена с использованием циклов или без них и т. д. Вариант модели «Кафе», схема которой приводится на рисунке, благодаря своей нетривиальности приобрел название «Мо дели с двойным захватом официантов». Сам прием «двойного захвата» берет свое начало из следующих наблюдений: 1. Наиболее очевидным было бы пред положить, что ожидание официанта в моде ли должно быть представлено в виде узла типа «Сервер», поскольку с точки зрения теории массового обслуживания, официант интуитивно обслуживающий прибор. Одна ко такой путь построения модели, т. е. дан ного ее участка, блокирует клиентов от каких либо действий в период ожидания об служивания официантом, что не соответст вует действительности. 2. В реальной ситуации ожидание офи цианта, для того чтобы сделать заказ, и ожи дание его, чтобы расплатиться -два раз ных участка всего процесса похода в кафе, и эти участки могут быть значительно уда лены друг от друга по времени. Вместе с тем, количество официантов в кафе за время посещения его конкретным клиентом редко увеличивается или уменьшается. Бо лее того, как правило, тот же официант, ко торый принял заказ, приносит счет за него. Клиенты имеют дело в обоих случаях с од ними и теми же официантами. В результате анализа указанных фактов при построении модели официанты были представлены в виде фиксированного ко личества пассивного ресурса (узел 8 на рис. 37), который транзакт клиент в тече ние своего жизненного цикла в модели за хватывает дважды (отсюда и название приема). 1. После выхода из узла 7 «Размещение за столиком», освобождая его после входа в узел 12 «Употребление пищи». 2. После выхода из узла 12, освобождая его перед входом в узел 13 «Клиент ушел». Чтобы транзакт не двигался по замкну тому кругу (по пути узлов 8®9®10®11® ®12®8®9®10®...) в одном из пользова тельских полей транзакта передается флаг цели захвата официанта. Изначально он имеет значение константы ORDER (заказ), которое меняется на MONEY (соответст вующее необходимости получить счет) пе ред входом в узел 12. В свою очередь в узле 9 производится проверка указанного флага и транзакт направляется по нужному марш руту, который в целом выглядит следующим образом: узлы 8®9®10®11®12®8®9®13. Ниже приведен текст модели. 82 Инструментальные средства R Технологии разработки программного обеспечения ag(\"Документы\",1,1,unif,5,2,0,3); network(dummy, dummy) пользова тель (в текстовом редакторе) вводит текст модели вручную с использованием конст рукций Pilgrim 5 и функций, таких как serv(...), attach(...) и других, представляю щих узлы модели. Конструкции определены в заголовочных файлах, функции описаны в тех же заголовочных файлах и определе ны в файле статической библиотеки. • Architect берет на себя большую долю ответственности за правильность синтаксиса и семантики раз рабатываемой модели. Все сказанное выше относится к про грамме Architect 1.0 и 2.0. В настоящее время разрабатывается версия 3.0, реали зуемая в виде отдельного приложения (не шаблона Visio). В ней предусмотрена ин теграция с Microsoft Visual C++ для автома тической сборки проекта, компиляции и линковки исполняемого файла модели, что еще более упростит работу пользователей Pilgrim 5. Установка Концепция конструктора Architect посто янно эволюционирует, а сама программа модернизируется. Как следствие, процеду ры по ее установке и использованию также не остаются неизменными. Все последние инструкции и актуальные замечания по ра боте с конструктором находятся в файлах Install.txt и ReadMe.txt, поставляемых с кон кретной версией и экземпляром Architect, который, в свою очередь поставляется вме сте с Pilgrim 5. Конструктор поступает к пользователю в папке Architect в запакован ном виде и устанавливается с помощью стандартного механизма Windows Installer (запуском программы setup.exe). В распакованном виде конструктор со стоит из следующих файлов (рис. 5): Инструментальные средства R Технологии разработки программного обеспечения 59 Pilgrim 5 elements.vss -палитра Mic rosoft Visio с узлами Pilgrim 5. Данный файл открывается автоматически при запуске шаблона Pilgrim 5 Architect.vst; • Pilgrim 5 Architect.vst -главный файл программы в виде файла шаблона прило жения Microsoft Visio. Именно с помощью этого файла выполняется запуск конструк тора. Чтобы начать построение модели можно открыть этот файл непосредственно из Проводника Windows (Windows Explorer) с помощью команды Выполнить… (Run…) или из Microsoft Visio; Microsoft Visio 2002 или выше из соста ва пакета Microsoft Office (рекомендуется Microsoft Visio 2003) -графический конст руктор реализованный в виде шаблона до кументов данного приложения; • Microsoft Visual C++ 4.0 или выше из состава пакета Microsoft Visual Studio -для компиляции и сборки готовых исполняемых программных файлов моделей (с расшире нием exe); • непосредственно пакет Pilgrim 5, со стоящий из статических библиотек (lib), за головочных файлов языка C++ (h) и файлов ресурсов (res), -необходим в процессе компоновки программных модулей. Кроме того, следует обратить внимание на то, что в процессе своей установки гра фический конструктор Architect производит запись в определенные разделы системно го реестра Windows, поэтому пользователь, 60 Инструментальные средства R Технологии разработки программного обеспечения CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 6. Приложения и компоненты, необходимые для создания и запуска имитационной модели который производит установку, должен об ладать соответствующими правами доступа. Запуск В этом и последующих разделах инст рукции по запуску и иллюстрации экранных форм приводятся применительно к про грамме Microsoft Visio 2003. Для того чтобы начать работу с конструк тором Architect, необходимо запустить про грамму Microsoft Visio (рис. 7). Для этого с помощью мышки нажмите на кнопку «Пуск» («Start») и выберите последовательно пунк ты меню «Программы» («Programs»), «Mic rosoft Office», «Microsoft Visio 2003». Альтер нативно, можно запустить Microsoft Visio с помощью ярлыка на рабочем столе (если таковой имеется), комбинации клавиш (ес ли она закреплена за ярлыком), команды «Выполнить…» («Run…») или непосредст венно из программы Проводник (Explorer). На экране должно появиться главное ок но программы Visio, изображенное на рис. 8. Как уже было отмечено выше, конструк тор Architect реализован в виде шаблона Visio. Перед началом работы будет не лиш ним узнать, как работает связка «шаблондокумент». Приложение Microsoft Visio предназначе но для создания разнообразных схем и чер тежей. Оно позволяет строить их с помощью множества фигур, сгруппированных в палит ры (stencils). (Английский термин «stencil» может переводиться по разному, для наших целей вполне подойдет слово «палитра»). Каждый документ схема может использовать Инструментальные средства R Технологии разработки программного обеспечения 61 В. В. Артюхин Рис. 8. Главное окно приложения Microsoft Visio 2003 Рис. 7. Запуск приложения Microsoft Visio 2003 произвольное число палитр, поставляемых с Visio или созданных самим пользователем. Схемы создаются посредством перетаскива ния фигур с палитры в рабочую область до кумента методом drag and drop, хорошо зна комому каждому пользователю Windows. На рис. 9 изображена панель «Фигуры» («Sha pes»), в которой представлены три палит ры, наиболее часто используемые для соз дания блочных диаграмм. Палитры хранят ся в отдельных файлах с расширением vss. Примеры палитр с фигурами Microsoft Visio Поскольку модели Pilgrim 5 нагляднее всего представляются именно в виде схем, становится очевидным, почему приложение Microsoft Visio было выбрано в качестве плат формы для реализации конструктора. Анно тирование и другое дополнительное оформ ление моделей также бывают весьма полез ны при составлении отчетов по моделиро ванию и других документов. Примеры тако го оформления мы рассмотрим несколько ниже, а сейчас вернемся к описанию про цесса запуска конструктора Architect. После запуска в главном окне Visio поя вится диалог выбора типа рисунка. Слева в списке групп необходимо выбрать «Дру гое» («Other»), а затем справа -единствен ный вид схемы «Pilgrim 5 Architect» (рис. 10). Если по каким то причинам после запус ка главное окно программы Visio осталось пустым (как на рис. 8), последовательно вы берите в главном меню пункты «Файл» («File»), «Новый» («New»), «Выбор типа ри сунка…» («Choose drawing type…»), после чего описанное окно появится (рис. 11). Впрочем, если вы используете меню, то без этого окна можно вообще обойтись, вы брав команды «Файл» («File»), «Новый» Инструментальные средства R Технологии разработки программного обеспечения 63 В. В. Артюхин Рис. 10. Диалоговое окно «Выбор типа рисунка…» Рис. 11. Выбор типа рисунка с помощью главного меню Visio («New»), «Pilgrim 5 Architect». С помощью этих действий вы сразу укажите Visio на не обходимость создания документа на основе шаблона для имитационных моделей. В процессе создания нового файла и от крытия шаблона и палитры на экране по следовательно появятся два окна вида, изо браженного на рис. 12. Дело в том, что шаб лон и палитра содержат программный код. Недобросовестный программист может при помощи встроенного в документы кода на нести вред вашему компьютеру (например, уничтожить данные на жестком диске). Указанные диалоговые окна позволяют заблокировать или разрешить выполнение программного кода (Visual Basic for Applica tions является макроязыком, поэтому встро енный в документы код также называется макрокодом, набором «макросов», «скрип тами», «сценариями»). Подобное окно поя вится дважды и, поскольку программный код является «сердцем» и «мотором» конст руктора Architect, без которых ни одна из его полезных функций не будет работать, вам необходимо дважды нажать на кнопку «Разрешить макросы» («Enable Macros»), по одному разу для программного кода в шаблоне и в палитре. В зависимости от настроек безопасно сти Visio окна блокировки/разрешения мак росов могут и не появиться, причем это мо жет означать как то, что программный код запускается без вашего ведома, так и то, что он блокируется опять таки без вашего участия. Самым первым признаком того, что про граммный код не выполняется, является отсутствие автоматической нумерации уз лов модели. Попробуйте перетащить любой узел из палитры в рабочую область. В обыч ных условиях его номер должен измениться на 1. Если же его номер остается 999, зна чит макрос заблокирован. Это может слу читься, если в упомянутых выше диалого вых окнах вы выбрали кнопку «Заблокиро вать макросы» («Disable Macros») или если уровень макробезопасности Visio установ лен в «Высокий» («High») или «Очень высо кий» («Very High»). В последнем случае вам необходимо изменить настройки макробез опасности, а затем закрыть и снова открыть программу Visio. Чтобы изменить уровень безопасности, последовательно выберите пункты меню «Сервис» («Tools»), «Парамет ры…» («Options…»). В появившемся диало говом окне (рис. 13) перейдите на вкладку «Безопасность» («Security») и нажмите на единственную кнопку -«Защита от макро сов» («Macro security»). В следующем диалоговом окне (рис. 14) вы увидите список уровней макробезопас ности. С помощью мыши установите его в «Средний» («Medium»). При таком уровне безопасности программа не будет блокиро вать или запрещать все макросы подряд, а будет спрашивать пользователя в каждом конкретном случае. После настройки уровня безопасности дважды нажмите кнопку «OK» в двух диало говых окнах, чтобы принять изменения и за 64 Инструментальные средства R Технологии разработки программного обеспечения CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 12. Диалоговое окно блокировки/разрешения макросов Инструментальные средства R Технологии разработки программного обеспечения 65 В. В. Артюхин Рис. 14. Диалоговое окно настройки параметров макробезопасности Visio Рис. 13. Диалоговое окно параметров Visio крыть их. Изменения вступят в силу после перезапуска Visio (т. е. после закрытия про граммы и ее повторного запуска). Сохранение файла с моделью выполня ется так же, как и любого другого документа Visio. Открытие сохраненного файла, в ос новном, аналогично созданию нового, за исключением того, что вместо команды «Создать», следует использовать команду «Открыть» («Open») с последующим выбо ром существующего файла из списка. Итак, после загрузки Microsoft Visio, из менения настроек (при необходимости) и создания нового документа на базе шаб лона Pilgrim 5 Architect вы можете присту пить к составлению своей модели. Основы работы Поскольку данный материал не предна значен для обучения читателя основам или тонкостям работы с программой Microsoft Visio 2003, в нем описываются только прие мы работы, прямо или косвенно связанные с графическим конструктором Pilgrim 5 Ar chitect. Созданный документ, который впослед ствии станет схемой имитационной модели, мало чем отличается от любого другого до кумента Visio. В частности, основная рабо чая область будущей модели выглядит аб солютно стандартно: по умолчанию она бе лая, пустая, имеет размер листа бумаги формата A4, и на нее нанесена сетка, помо гающая позиционировать фигуры. Однако при использовании Pilgrim 5 Architect на эк ране присутствует несколько специфиче ских элементов (рис. 15). По умолчанию в правой части инстру ментальной панели «Стандартная» («Stan dart») имеются четыре дополнительные кноп 66 Инструментальные средства R Технологии разработки программного обеспечения CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 15. Главное окно Microsoft Visio 2003 после создания документа по шаблону Pilgrim 5 Architect ки. Они крайне важны для работы с конст руктором, и чтобы пользователь не потерял их в большой количестве других кнопок на той же панели, иконки, нанесенные на них, выполнены в черно белой гамме. Свое зна комство с конструктором мы начнем именно с этих кнопок (рис. 16). диалога (в такой ситуации кнопка «Обно вить» блокируется). Нажатие данной кноп ки делает параметр «реальным». Именно после ее нажатия он запоминается в конст рукторе и добавляется в список определен ных параметров;• кнопка «Обновить». Становится дос тупна, если пользователь ввел имя уже су ществующего параметра или выбрал его из списка. В этом случае пользователь может задать любые новые значения в полях «Тип параметра», «Начальное значение» и «Опи сание параметра». После нажатия кнопки «Обновить» информация о параметре будет изменена. Эту возможность следует исполь зовать очень осторожно -возможна ситуа ция, когда «обновленная» переменная уже была задействована в качестве параметра какого либо узла. В этом случае изменение ее типа приведет к ошибке на стадии транс ляции модели в программный код;• кнопка «Удалить». Становится доступ на в тех же случаях, что и кнопка «Обно вить», но ее нажатие приведет к полному удалению переменного параметра. С уда лением следует быть осторожным по тем же причинам, что и в случае с обновлением.Перейдем теперь от определения пере менных параметров к установке глобаль ных параметров модели. Диалог редактиро вания глобальных параметров модели поя вится на экране после нажатия кнопки с ри сунком в виде буквы «M» (рис. 18).Большая часть параметров, которые можно установить в данном диалоговом ок не соответствует аргументам функции mod beg(…), рассмотренной ранее. Такими па раметрами являются: • название модели; • общее модельное время; • пользовательский инициализатор дат чика случайных чисел (в текущей версии конструктора не редактируется, использу ется инициализатор по умолчанию); • контролируемая очередь для построе ния графика динамики задержек и контро лируемый терминатор для построения гра фика динамики потока (в диалоге нужные Инструментальные средства R Технологии разработки программного обеспечения 69 В. В. Артюхин Рис. 18. Диалоговое окно редактирования глобальных параметров модели очередь и терминатор выбираются из выпа дающего списка, иными словами, эти узлы должны присутствовать в схеме до того, как их можно будет выбрать в качестве контро лируемых); CASE технологии создания имитационных моделей в среде Pilgrim 5 5 Рис. 19. Диалоговое окно редактирования параметров отчета по модели событий трансляции появляется запись о каждом шаге конструктора, а также все со общения об ошибках и предупреждения. Программный код модели, т. е. текст, со ответствующий ее схеме и параметрам, на языке программирования C++, появляется в нижней части диалога. Если в процессе трансляции конструкто ром была обнаружена ошибка, о чем свиде тельствует запись в списке событий, а так же запись «окончена неудачно» в строке «Результат трансляции», то программный код будет неполным и непригодным для дальнейшей обработки. В этом случае не обходимо проанализировать сообщение об ошибке, закрыть диалог трансляции (с по мощью соответствующей кнопки) и перед повторной трансляцией исправить ошибку в схеме модели или в ее параметрах. Если трансляция завершилась удачно (в списке событий нет сообщений об ошиб ках, а в строке «Результат трансляции» по является запись «окончена успешно»), зна чит синтаксически, а во многом и семанти чески модель верна, и ее программный код можно использовать для создания испол няемого файла модели. Если трансляция модели в конструкторе Architect прошла успешно, это на 100% оз начает, что при обработке ее кода компиля тором C++ проблем не возникнет. Однако это всего лишь вопрос синтаксиса. С точки зрения семантики, т. е. смысла того, что происходит в модели, конструктор также выполняет множество проверочных дейст вий (например, наличие входов в генерато ры или выходов из терминаторов), но он не может постичь замысел автора модели в це лом, поэтому ответственность за то, что именно моделируется в большей степени лежит на самом авторе. Для того чтобы сохранить полученный код в файл на диске, используется кнопка «Сохранить». Инструментальные средства R Технологии разработки программного обеспечения 71 В. В. Артюхин Рис. 20. Диалоговое окно трансляции модели в программный код На этом мы заканчиваем знакомство с кнопками инструментальной панели и пе реходим непосредственно к созданию схе мы модели. В левой части главного окна Visio нахо дится палитра «Элементы Pilgrim5», на кото рой размещены фигуры, соответствующие узлам, имеющимся в среде имитационного моделирования Pilgrim 5, а также коннекто ры (соединяющие линии) необходимые для создания графа модели, т. е. для обозначе ния направления переходов транзактов ме жду узлами (рис. 21). CASE технологии создания имитационных моделей в среде Pilgrim 5 5 Рис. 21. Палитра «Элементы Pilgrim 5» транзакт из ключа в очередь или из очереди в ключ. Неаккуратное использование кон некторов может быть чревато ошибками, которые не будут зафиксированы трансля тором, поскольку являются чисто семанти ческими. Удаление узлов и коннекторов можно произвести с помощью кнопки «Delete» на клавиатуре или с помощью кнопки на глав ной инструментальной панели Visio. Кроме того, узлы и коннекторы можно копировать (при помощи клавиатуры, контекстного ме ню или кнопок на главной инструменталь ной панели). Если копируется узел, то при вставке появится новый узел с новым по по рядку номером, но с параметрами ориги нального узла. В качестве примера, рассмотрим граф простейшей модели «Бухгалтер». Данная модель отражает процесс обработки со трудником неких бумаг. Бумаги (транзакты) поступают из некоего источника (генерато ра) с определенной периодичностью в стоп ку на столе (очередь), обрабатываются бух галтером (сервером) с заданной скоростью и помещаются в архив (терминатор). После размещения всех нужных узлов в рабочей области документа, он будет по хож на рис. 22. В данном случае имеется направленный граф, состоящий из узлов необходимых ти пов с правильной топологией. Однако этот граф еще не модель. Все узлы в нем имеют параметры по умолчанию, а догадаться, что собой представляет этот граф, стороннему наблюдателю довольно сложно. Чтобы выполнить настройку параметров узла, необходимо произвести на нем двойной щелчок левой кнопкой мыши. В результате на экране отобразится диалоговое окно (рис. 23), Инструментальные средства R Технологии разработки программного обеспечения 73 В. В. Артюхин Рис. 23. Диалоговое окно настройки общих параметров узла Рис. 22. Граф модели «Бухгалтер» которое одинаково для всех типов узлов. Однако в зависимости от типа узла некото рые кнопки могут быть заблокированы (нет смысла планировать действия до входа транзакта в генератор или после его входа в терминатор). В данном окне можно задавать опера ции, которые должны быть выполнены до и после входа транзакта в узел, а также ус ловия перехода транзакта в определенные узлы, с которыми соединен данный узел. Оба действия выполняются с помощью сис темы SCL. В нашем случае важнее всего кнопка «Определить начальные парамет ры…» При нажатии на нее появляется второе диалоговое окно, на этот раз специфиче ское для типа узла, параметры которого нам нужно отредактировать. На рис. 24 изо бражено окно редактирования параметров сервера, а на рис. 25 -окно редактирова ния параметров очереди. В подобных диалоговых окнах количест во, тип и названия параметров соответству ют тем, которые применимы для конкретно го типа узла. Если параметр получает только фиксированные значения, то любое из них можно выбрать с помощью выпадающего списка. Например, параметр очереди «При оритетная» имеет логический тип, поэтому в выпадающем списке присутствует 2 зна чения: «Да» и «Нет». Если в числе перемен ных параметров модели были определены переменные логического типа, то они также будут присутствовать в списке, поскольку могут выступать в качестве параметра «При оритетная» (в этом случае очередь будет приоритетной или нет в зависимости от того, какое значение имеет на каждый конкрет ный момент соответствующий переменный параметр). Сказанное выше верно и для других параметров различных типов, при менительно ко всем узлам. Это дает боль шую гибкость при построении моделей. После того как мы зададим значения па раметров для всех узлов нашего графа, изображение модели «Бухгалтер» приоб ретет следующий вид (рис. 26). Хотя с первого взгляда изменились толь ко подписи над узлами, внутри конструкто ра уже сохранились и другие их параметры. На данный момент модель готова к трансля ции в код на C++. Отдельно следует объяснить назначение системы «Шаговая цепная логика» (SCL). SCL -это система, построенная на интуи тивном интерфейсе и позволяющая пользо 74 Инструментальные средства R Технологии разработки программного обеспечения CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 24. Диалоговое окно редактирования параметров сервера Рис. 25. Диалоговое окно редактирования параметров очереди Рис. 26. Граф модели «Бухгалтер» после изменения параметров узлов вателю с легкостью конструировать логиче ские выражения, манипулировать перемен ными параметрами и вызывать встроенные функции Pilgrim 5. Такая система может по надобиться для: Конструктор Architect позволяет зада вать целые блоки операций, выполняемых практически в любом месте модели, не тре буя при этом от пользователя знания язы ка программирования (хотя знания правил арифметики и основ логики все же необхо димы). Это делается при помощи диалого вых окон, которые могут быть открыты поль зователем посредством кнопки «Постро ить…» Предположим, что до входа транзакта в определенный узел, надо вычислить зна чение переменного параметра, который вы ступает в качестве параметра этого узла. Для этого следует произвести двойной щелчок на значке узла в рабочей области документа (на экране появится диалого вое окно настройки общих параметров уз ла, изображенное на рис. 23), после чего нажать на кнопку «Построить…» в верх ней части этого диалога. В результате на экране появится окно, изображенное на рис. 27. В этом окне можно вызывать функции Pilgrim 5, такие как открытие или закрытие ключа, взятие случайного числа, перена стройка генератора, загрузка склада ре сурсами и другие (рис. 28), изменять пара метры транзакта (рис. 29) или переменные параметры. Более того, любое из упомя нутых действий может быть запрограмми ровано таким образом, чтобы выполнять Инструментальные средства R Технологии разработки программного обеспечения 75 В. В. Артюхин Рис. 27. Диалоговое окно «Построитель действий» ся только при соблюдении определенных условий, задаваемых в виде логических выражений, опять таки без программиро вания. В данном случае нам необходимо произ вести изменение переменного параметра. Для этого необходимо нажать на кнопку «Изменение переменных». В результате на экране возникнет новое диалоговое окно, изображенное на рис. 30. В этом окне можно строить выражение с помощью арифметических действий над числовыми и логическими переменными и константами с использованием уже сущест вующих в модели переменных параметров, а также внутренних переменных Pilgrim 5 (на пример, параметров транзактов). Пользова телю необходимо «собрать» нужное выраже ние и последовательно закрыть три открытых диалоговых окна с помощью кнопки «OK». 76 Инструментальные средства R Технологии разработки программного обеспечения CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 29. Диалоговое окно «Изменение параметров текущего транзакта» Рис. 28. Диалоговое окно «Выбор оператора Pilgrim5» Рис. 30. Диалоговое окно «Построитель выражений» Выпадающие (и обыкновенные) списки с контекстно чувствительным содержимымэто одна из ключевых особенностей конст руктора Architect. Например, в случае по строителя выражений невозможно выпол нить арифметические действия над логиче скими переменными, равно как и логические операции -над целыми или дробными пе ременными. Другой ключевой особенностью Archi tect, реализованной в рамках SCL, является двойственное представление выражений. С точки зрения программы, удобнее всего хранить выражения в виде текста на C++, поскольку именно в такой форме они вой дут в программный код после трансляции. Однако для пользователя такое представ ление выражения может быть непонятным, поэтому все выражения в Architect пред ставлены в двух формах: в форме кода и в мнемонической форме, которая проще чи тается. Например, на рис. 31 изображено диалоговое окно построителя условий, в ко тором создается некоторое логическое вы сказывание. В нижней части этого окна выражение представлено в двух видах: • «t iu0==t iu1 || a=0» -эта фор ма, оптимальная для программы и привыч ная программистам на C++; • «[Транз Цел1]=[Транз Цел2] ИЛИ [a]=0» -более громоздкая форма, одна ко она более понятна пользователям. На этом мы закончим рассмотрение ба зовых возможностей системы SCL. Дополнительные возможности В заключение данной статьи отметим не сколько дополнительных возможностей Vi sio, поддерживаемых конструктором Archi tect, которые позволяют не только создать имитационную модель, но и оформить ее. Пользуясь этими средствами можно при дать документу со схемой модели закончен ный вид и сразу включить его в отчет. Таким образом, документ содержит в себе двой ную функциональность. Речь идет о средствах форматирования. Дело в том, что конструктор обрабатывает только фигуры с палитры «Элементы Pil grim 5» безотносительно к тому, какого они цвета или какой в них применяется шрифт, а также внутренние переменные. Все ос Инструментальные средства R Технологии разработки программного обеспечения 77 В. В. Артюхин Рис. 31. Диалоговое окно «Построитель условий» тальные элементы, будь они стрелками, геометрическими фигурами, текстом или чем нибудь иным, конструктор не обраба тывает и вообще не видит. CASE технологии создания имитационных моделей в среде Pilgrim 5 Инструментальные средства R Технологии разработки программного обеспечения головочных файлах исходный код для про граммы модели совсем не похож на обыч ный текст Windows программы, кроме того, 3. Изменение направления перехода тран закта из какого либо узла может привести к необходимости значительной переработ Pilgrim предъявляет к тексту модели допол ки, т. е. перенабора текста модели, что не Следует также отметить, что хотя модели Pilgrim 5 могут иметь разную степень сложно сти, исходные файлы, отражающие их, име ставление модели из ее графического пред ставления, избавляя пользователя от необ ходимости делать двойную работу, предва ют строго определенную структуру (рис. 2). рительно составляя модель на бумаге. На В. В. Артюхин нительные требования, не проверяемые является рациональным. рис. 3 приведен внешний вид основного эк компилятором. 4. Наличие четкой структуры исходного рана конструктора Gem. Из рисунка видно, Как же быть экономистам, финансистам файла модели, безусловно, свидетельству что в конструкторе редактируется модель, или иным специалистам, которые могут из ет о возможности и уместности частичной исходный текст которой был приведен ранее. влечь ощутимую выгоду из имитационного автоматизации процесса составления мо моделирования, но которые не встречались делей. с этим языком или не изучали программиро вание вообще? Конструктор Gem Ситуация в значительной степени услож В свое время появление конструктора Рис. 1. Процесс решения задачи няется, если усложняется сама модель. На имитационных моделей Gem для среды с помощью графического конструктора пример, в ситуациях, когда один узел имеет Pilgrim 5 в значительной степени упростило несколько выходов, требуется написание и ускорило процесс создания моделей. достаточно сложных конструкций ветвле Пользователь обрел инструмент, позволяю ния if языка C++ и составитель модели дол щий получить исходный файл модели из ее жен точно знать, как их составлять и где по чертежа в конструкторе. Иными словами, мещать, т. е. автор модели должен не толь конструктор Gem способен генерировать ко изучить синтаксис языка C++, но и знать формальное, готовое к компиляции, пред ряд фундаментальных техник программи рования, что среди специалистов в области экономики случается не слишком часто. Как правило, проблемы начинаются еще на стадии обучения работе с системой. Кроме того, поскольку модель в своем отредактированном и готовом к компиляции виде представляет собой не что иное, как текстовый файл и не несет в себе никакой Рис. 2. Структура исходного файла модели в среде Pilgrim 5 понятной графической информации (на Далее приведен список причин, по кото пример, отражающей топологию сети моде рым создание графического конструктора ли), пользователь еще до начала редакти для среды имитационного моделирования рования модели должен совершенно ясно Pilgrim 5 с самого начала являлось умест представлять себе ее структуру: количест ным и, как было отмечено выше, практиче во и типы узлов, их параметры, переходы ски необходимым. между ними и то, в каких случаях происхо дят эти переходы. На практике это означает 1. Большинство пользователей системы предварительное применение таких «тех Pilgrim 5 не являются программистами и по нических» средств, как карандаш и бумага тому испытывают сложности при ручном со или, в лучшем случае, какого либо посто ставлении моделей. роннего графического редактора. И если 2. При работе вручную, как правило, вдруг пользователь хочет изменить что пользователь вынужден составлять модель либо в сети модели, то часто он должен дважды -в графическом и текстовом виде, в значительной степени переписать файл хотя второе обычно в точности отражает программы, что кажется неестественным, первое, как минимум по количеству и типам если на бумаге достаточно просто стереть используемых узлов и имеющимся между одну стрелку и прочертить другую. ними связям. 53 54 Здесь также редак Инструментальные средства R Технологии разработки программного обеспечения 57 В. В. Артюхин Рис. 4. Основное окно конструктора Architect ствий необходимых к произведению до и после входа транзакта в узел, условий, с помощью которых для транзакта выбира ется дальнейший маршрут; • при изменении нескольких выходов из узлов нет необходимости пересматривать всю модель -нужно только удалить ненуж ные выходы, добавить нужные и снова за пустить процесс генерирования файла мо дели; • иерархический подход к построению моделей с помощью узла Parent, не являю щего узлом Pilgrim 5. С помощью этого узла возможен перенос частей редактируемой модели (например, каких либо полусамо но не берет на себя ответственности ни за синтаксическую корректность модели, ни за ее смысловую нагрузку. Эволюция и рост популярности пакета Pilgrim 5 способство вали созданию для него нового графиче ского конструктора. Конструктор Architect При разработке графического конструк тора имитационных моделей Architect кон цепция «удобства для пользователя» пони малась, как необходимость предоставить ему возможность работать с составляе мой моделью в терминах его предметной области или, в крайнем случае, в терминах ден в начале статьи. Вообще, все приведен ные тексты моделей, были получены с по мощью Architect и оставлены в том виде, в каком он их выдает. Architect реализован в виде шаблона (или решения) программы Microsoft Visio, что облегчает создание моделей для поль зователей уже знакомых с этим редактором схем за счет известного интерфейса и ме тодик работы. Одновременно такой подход к реализации конструктора не осложнит ра боту для новых пользователей. Построение структуры модели, как и в конструкторе конструктора Architect. тируется модель, текст которой был приве раметров: пользователь должен знать, что целое в языке C++ имеет тип int, а дроб ное -float (или double). Говоря коротко, приложение не осуществляет синтаксиче ского контроля. Во все указанные диалого вые окна пользователь может ввести лю бые «знакосочетания», поля для ввода па раметров узлов также не проверяются ни на тип, ни на допустимость введенного в них значения (например, типичными ошибками, не контролируемыми конструктором Gem являются ввод отрицательного времени об служивания, дробного числа каналов у сер вера или переменного параметра, который не был определен или чей тип записан имитационного моделирования. Требова лось избавить пользователя от взаимодей ствия с исходным файлом модели, т. е. с текстом на языке программирования C++ (иными словами, позволить ему работать с моделью на некотором уровне абстрак ции, не заботясь о деталях ее реализации в самой системе имитационного моделиро вания). Таким образом, была предпринята попытка снять «образовательный ценз» для пользователей Pilgrim 5, не являющихся программистами или другими IT специали стами. На рис. 4 изображен основной экран Gem, происходит при помощи технологии стоятельных частей некоторого процесса) drag and drop. с ошибкой). на так называемые подслои. В основном Кроме того, при визуальном редактиро Разумеется, грубые ошибки будут заме слое модели эта ее часть заменяется узлом вании схемы можно пользоваться практиче чены компилятором C++, но это случается типа Parent, что в некоторых случаях позво ски всеми возможностями, предоставляе не всегда. Если пользователь при вводе па ляет добиться значительно лучшей чита мыми Visio, например: раметров сервера перепутал поля и вместо бельности графа. При генерации исходного числа каналов записал дробное значение файла модели, конструктор автоматически математического ожидания, то такая про распознает узлы типа Parent и транслирует грамма скомпилируется и даже запустится, их в реальные цепочки узлов, отображен но результаты будет выдавать неверные. ные на том подслое, на который ссылается При этом следует помнить, что мы говорим этот конкретный Parent; о пользователе, который не является про • генерация исходного файла модели граммистом, и при всем своем желании мо по ее чертежу -делается это буквально жет оказаться неспособным исправить одним щелчком мыши. ошибки в текстовом файле модели, даже если они будут обнаружены компилятором. К сожалению, не была решена главная Справедливости ради стоит отметить, проблема пользователей непрограммистов. что конструктор Gem проверяет некоторые Дело в том, что при всех своих достоинст смысловые ошибки модели. Однако про вах Gem не позволяет пользователю полно верке подлежат исключительно элементар стью абстрагироваться от синтаксиса C++. ные оплошности пользователей, такие как За исключением вызовов функций уз наличие входов в генератор или выходов из лов, весь остальной текст действий (до на терминатора. Например, модель, которая чала работы модели, до входа транзакта состоит из одного генератора и следующе в узел, после входа транзакта в узел и усло го за ним сервера с выходом в самого себя, вия переходов между узлами) по прежнему по мнению конструктора Gem вполне «про должен вводиться вручную. Конструктор ходная». с помощью диалоговых окон позволяет Подведем итог. Конструктор Gem облег пользователю не беспокоиться о том, куда чает процесс создания имитационных мо будет вставлен текст, но проверка синтак делей для пользователя, выстраивая для сической корректности этого текста, как него узлы с их параметрами и связями, и раньше, должна осуществляться самим а также текст, введенный пользователем, пользователем. Это же касается и диалого в соответствии с необходимой структурой вого окна для определения переменных па исходного файла модели для среды Pilgrim 5, 56 Инструментальные средства R Технологии разработки программного обеспечения Инструментальные средства R Технологии разработки программного обеспечения 55 В. В. Артюхин Рис. 3. Основное окно конструктора Gem CASE технологии создания имитационных моделей в среде Pilgrim 5 Рис. 32. Различные Пример работы В завершении данной статьи рассмотрим процесс построения законченной модели с использованием графического конструкто ра Architect. В качестве примера возьмем од ну из моделей, часто используемых для обу чения имитационному моделированию в сре де Pilgrim 5 -модель «Кафе» (рис. 37). шрифты и стили Рис. 33. Различные стили линий Рис. 34. Дополнительные элементы Рис. 35. Выделение цветом Рис. 36. Использование текста Важен тот факт, что приведенная схема модели довольно далека от элементарной и получена с помощью графического конст руктора Architect. Приведенный текст моде ли был автоматически сгенерирован и от форматирован, включая комментарии, на основании только этой схемы, настройки параметров узлов, а также настройки пере менных и глобальных параметров модели. То есть все операции по составлению опи санной модели и созданию ее исходного ко да были выполнены в конструкторе Archi tect без программирования вручную, а так же без карандаша и бумаги.В дальнейшем конструктор Architect пред полагается дополнить возможностью вне сения в схему модели групп логически объ единенных узлов «одним нажатием кнопки».В среде имитационного моделирования Pilgrim 5 есть структуры связанных в опре деленной последовательности узлов, встре чающиеся в моделях наиболее часто. Их можно назвать структурными шаблонами. Каждая неучебная модель уникальна по це лям своего создания и уровню детализации. Однако некоторые части многих моделей похожи как две капли воды.В качестве наиболее красноречивого примера можно привести «схему зарядки». Она применяется для загрузки транзактов в модели замкнутого типа и, чаще всего, со стоит из двух блоков, один из которых вклю чает генератор, управляемый генератор и терминатор, а второй -генератор и терми натор. Эта схема переходит из модели в мо дель без изменений, однако пользователь вынужден каждый раз создавать ее заново по одному узлу. В будущих версиях Architect предполагается исправить этот недостаток. //Модель «Кафе с двойным захватом официантов» #include \"Pilgrim.h\" forward { //Внутренняя переменная для указания //следующего узла. int NextTop=0; //Значение флаг, показывающее, что клиент //зовет официанта, чтобы сделать заказ. Рис. 5. Комплект поставки конструктора Architect(файловая структура)",
  "abstract_length": 518,
  "text_length": 60440,
  "method": "GROBID"
}